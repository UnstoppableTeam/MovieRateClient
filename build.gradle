plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id "org.liquibase.gradle" version "2.0.2"
    id "com.moowork.node" version "1.3.1"
}

repositories {
    mavenCentral()
}

repositories.whenObjectAdded {
    if (it instanceof IvyArtifactRepository) {
        metadataSources {
            artifact()
        }
    }
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    compileOnly 'org.projectlombok:lombok:1.18.8'
    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE'
    compile'org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE'
    compile'org.springframework.boot:spring-boot-starter-log4j2:2.2.2.RELEASE'
    compile'org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE'
    compile 'org.postgresql:postgresql:42.2.9'
    compile 'org.hibernate:hibernate-core:5.4.9.Final'
    compile 'org.hibernate:hibernate-entitymanager:5.4.9.Final'
    compile 'io.springfox:springfox-swagger2:2.9.2'
    compile 'io.springfox:springfox-swagger-ui:2.9.2'
    compile 'io.springfox:springfox-bean-validators:2.9.2'
    compile 'com.vladmihalcea:hibernate-types-52:2.9.3'
    implementation 'junit:junit:4.12'
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

group = 'MovieRateClient'
version = '1.0-SNAPSHOT'

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

apply plugin: 'java'
apply plugin: "com.moowork.node"
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

node {
    // Version of node to use.
    version = '13.5.0'

    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'https://nodejs.org/dist'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/frontend/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/frontend/npm")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/frontend")
}

task npmInstallDependencies(type: NpmTask) {
    dependsOn 'npmSetup'
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = 'frontend'
    }
    args = ['install']
}

task npmBuild(type: NpmTask) {
    dependsOn 'npmInstallDependencies'
    execOverrides {
        it.workingDir = 'frontend'
    }
    args = ['run', 'build']
}

task copyFrontendToBuild(type: Copy) {
    dependsOn 'npmBuild'
    from "$projectDir/frontend/build/"
    into "$buildDir/resources/main/static"
}

task startFrontend(type: Copy) {
    dependsOn 'npmStart'
}

processResources{
    dependsOn 'copyFrontendToBuild'
}

tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
}

test {
    useJUnitPlatform()
}